#summary Shop example xUmlCompiler system.

Consider this class diagram:

_Figure 1:_

http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/docs/wiki/class3.png

This system is defined by the class [http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/shop/Shop.java Shop]

==View the system==
Before you run the viewer you need to indicate where you are going to save the setttings for the view of the Shop system. The file is currently set to be _src/viewer/Shop.ini_.

To view the system, run the above class (the main method calls the viewer). You will need to reposition the elements if your settings file does not exist but when you close the viewer the positions will be saved automatically.
 
You may want to change the name of the location of the settings file in the main method.

When you run the viewer you will see a window with the image of Figure 1.

==Generate the classes==
xUmlCompiler generates
  * entity classes with ejb3 annotations (and possible hibernate specific annotations)
  * interfaces for all entities
  * object factory classes
  * injector classes for late binding of actions
  * search classes based on identifier and index specifications 
  * value enumerations for static constants associated with attributes

The classes are generated by running the class [http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/shop/ShopGenerator.java ShopGenerator].

All classes are written to the directory temp/shop:

_Figure 3:_

http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/docs/wiki/generated1.png

Notice the getter and setter methods on the Customer interface class and the search methods. If we had defined identifiers (uniqueness rules other than the primary key id field) we would see finders for the identifier attribute groups as well.  

http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/docs/guide/images/img05.jpg

==Implement actions==
All methods and state machine entry points should be implemented by your behaviour classes.

[http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/shop/CustomerBehaviour.java CustomerBehaviour] is the actions implementation for the Customer class (the sendMessage operation).

[http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/shop/OrderBehaviour.java OrderBehaviour] is the actions implementation for the Order class

[http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/shop/ShipmentBehaviour.java ShipmentBehaviour] is the actions implementation for the Shipment class:

==Define an injector==
The implementations of action interfaces above are injected at runtime by the Guice framework. The injector is configured by [http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/shop/ShopInjectorModule.java ShopInjectorModule].

==Execute the system==
To execute the system we must first ensure that the generated objects use [http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/shop/ShopInjectorModule.java ShopInjectorModule] for late bound injection of behaviour:
{{{
        ObjectInjector.setInjector(Guice
                .createInjector(new ShopInjectorModule()));
}}}