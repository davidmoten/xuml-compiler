#summary Simple example xUmlCompiler system

Consider a simple system with customers and their email addresses. 
  * A customer can be contacted by email and the customer can have any number of emails (including none). 
  * Any email in the system must be associated with one and only one customer.
Additionally

  * A customer is either _active_ or _inactive_.
  * A new email can only be associated with a customer when the customer is _active_
  *  A customer can be activated or deactivated.
  * A new customer entity starts life as _inactive_.
  * A customer's name is unique but may change over time.
  * A customer can be removed from the system but only if _inactive_.

As a test we will
  * create a customer called Fred
  * add an email for Fred
  * activate Fred
  * add the email for Fred again
  * send an email to Fred

_Figure 1:_

||http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/docs/wiki/simple2.png||

_Figure 2: Customer State Machine_

||http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/docs/wiki/simple-state.png||

Here's how this system is defined and executed:

||Definition, Validation||[http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/simple/Simple.java Simple.java]||
||Viewing||[http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/simple/SimpleViewer.java SimpleViewer.java]||
||EJB Generation||[http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/simple/SimpleGenerator.java SimpleGenerator.java]||
||Action Language||[http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/simple/CustomerBehaviour.java CustomerBehaviour.java]||
|| ||[http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/simple/EmailBehaviour.java EmailBehaviour.java]||
||Injection||[http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/simple/SimpleInjectorModule.java SimpleInjectorModule.java]||
||Persistence||[http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/java/META-INF/persistence.xml persistence.xml]||
||Testing and Execution||[http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/java/moten/david/xuml/model/example/simple/Test.java Test.java]||

Results of the run of the test class:
{{{
2008-06-11 10:11:28,953 INFO  moten.david.xuml.model.example.simple.EmailBehaviour - sending an email to fred.smith@googlecode.com: Hi
2008-06-11 10:11:28,953 INFO  moten.david.xuml.model.example.simple.EmailBehaviour - body: This is a test message
2008-06-11 10:11:28,953 INFO  moten.david.xuml.model.example.simple.TestSimple - finished run
}}}