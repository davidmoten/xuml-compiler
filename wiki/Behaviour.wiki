#Guice injected behaviour

Java is used as the action language in xuml-compiler. Using Guice we define bindings from the generated behaviour interface classes to our implementations.

== How do I get an `EntityManager` in my behaviour class? ==
Simple behaviour classes may not need an entity manager at all (e.g. an event that sets an address of a person for example). However, more complex business logic such as performing a find in a behaviour class might need access to the current `EntityManager`. 

A useful pattern is to use `ThreadLocal` (thread specific object storage) to provide thread specific `EntityManagers`:

  *If the current thread already has an open entity manager then reuse that one otherwise  create one from the `EntityManagerFactory`.

In your injector module use [http://code.google.com/p/xuml-compiler/source/browse/trunk/xuml-compiler/src/main/java/moten/david/util/persistence/ThreadLocalEntityManagerFactory.java ThreadLocalEntityManagerFactory]: 
{{{
  bind(EntityManagerFactory.class).to(ThreadLocalEntityManagerFactory.class);
}}}

TODO: A provider is set up for `EntityManager.class` but this should be modified to conform to the Guice Provider definition.