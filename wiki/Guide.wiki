#summary Guide to using xUmlCompiler

==Introduction==
This guide shows you how to define, view, generate and execute a system using xUmlCompiler.

For a quick start look at [Example1Simple Simple Example].

==Setup==
==Building xUmlCompiler from source==
This is currently the preferred method rather than obtaining the xuml-compiler dependency from the repository as a lot of development is occurring on 0.4.8-SNAPSHOT.

The following commands build xuml-metamodel, xuml-compiler and the example projects in one go:

{{{
svn checkout http://xuml-compiler.googlecode.com/svn/trunk xuml
cd xuml/xuml-compiler-parent
mvn clean install
}}}

===Sample project===

Export the simple example project definition and main project:


 `svn export http://xuml-compiler.googlecode.com/svn/trunk/examples/simple-definition simple-definition`

 `svn export http://xuml-compiler.googlecode.com/svn/trunk/examples/simple simple`

In simple-definition
 `mvn clean install`
In simple
 `mvn clean install`

Refactor this simple project as you wish.

The sample project was tested with Eclipse 3.5 and the m2eclipse plugin.



===Use the maven dependency===
The sample project above refers to the xuml-compiler dependency as below:

Add this project's repository to your pom.xml
{{{
 <repositories>
   <repository>
     <id>xuml-compiler-repo</id>
     <name>xuml-compiler</name>
     <url>http://xuml-compiler.googlecode.com/svn/repo/</url>
   </repository>
  </repositories>
}}}
Add the xuml-compiler dependency:
{{{
 <dependency>
   <groupId>com.google.code</groupId>
   <artifactId>xuml-compiler</artifactId>
   <version>0.4.8-SNAPSHOT</version>
 </dependency>
}}}

==System==
Here are the steps required to create a system:
  # Define a system
  # View/validate the system
  # Generate the EJBs
  # Include the generated EJBs in your runtime classpath
  # Implement the generated Action interfaces
  # Create an injector module

To run the system:
  # Initialize the injector
  # Within the context of an `EntityManager` transaction make persistent changes to the data and send events to entities.

===Define a system===
Create a class that extends [http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/main/java/moten/david/xuml/model/util/SystemBase.java SystemBase]. Create all the system bits in the constructor by using the utility classes that [http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/main/java/moten/david/xuml/model/util/SystemBase.java SystemBase] offers. For example, from [Example1Simple Simple Example]:
{{{
public Simple extends SystemBase {
        public Simple() {
                super(null, "Simple");
                initialize();
        }

        private void initialize() {
                model.Package pkg = createRootPackage("simple", "a simple system");
                Class customer = createClassWithArbitraryId(pkg, "Customer",
                                "a customer, possible contactable using multiple emails");
                createAttribute(customer, "name").setUnique(true);
                State inactive = createState(customer, "Inactive");
                State active = createState(customer, "Active");
                ...
                ...
                createAssociation("R1", createAssociationEndPrimary(customer,
                                Multiplicity.ONE, "is used to contact"),
                                createAssociationEndSecondary(email, Multiplicity.MANY,
                                                "is contactable via"));
        }
}
}}}

or 
===Define a System using Ecore===
Navigate to xUmlMetaModel/model/uml.ecore, open the file in Eclipse with the default Sample Ecore Editor, then choose Create Dynamic Instance on the System node:

http://xuml-compiler.googlecode.com/svn/trunk/xUmlCompiler/docs/wiki/ecoreSystemCreate1.png 

===Validate===
Validation is performed by a [http://code.google.com/p/xuml-compiler/source/browse/trunk/xUmlCompiler/src/main/java/moten/david/xuml/model/util/SystemBase.java SystemBase] method that throws a `ValidationException`:
{{{
    Simple simple = new Simple();
    simple.validate();
}}}
===View===
{{{
    simple.view("src/viewer/Simple.systemView");
}}}
===Generate===
{{{
    simple.generate("temp/simple");
}}}

To get stuck into a simple example go to [Example1Simple Simple Example].

A more detailed example is [Example2Shop Shop Example].