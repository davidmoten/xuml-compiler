#summary Guide to using xUmlCompiler
#labels Featured

<wiki:toc max_depth="4" />

==Introduction==
This guide shows you how to define, view, generate and execute a system using xUmlCompiler.

For a quick start look at [Example1Simple Simple Example].

===Create your own xuml project===

Get the simple example project so that you can change it to your needs:
{{{
svn export http://xuml-compiler.googlecode.com/svn/trunk/examples/simple-definition my-xuml-definition
svn export http://xuml-compiler.googlecode.com/svn/trunk/examples/simple my-xuml
}}}

If you are using Eclipse, create a svn repository (SVN Repositories View) with the url http://xuml-compiler.googlecode.com/svn. Explode the new repository down to trunk - examples and right click on ''simple-definition'' and select Export. Select your Eclipse workspace in the path, then in Package Explorer, select the project and hit F2 to rename it (to say my-xuml). Perform an export of both simple-definition and simple, renaming them to my-xuml-definition and my-xuml.

Now edit my-xuml-definition/pom.xml and my-xuml/pom.xml and change the parent version tags at the top to be the latest released version, say <code><version>4.10</version></code> (if you want to use the snapshot version you will need to checkout xuml-compiler-parent and do mvn clean install).

The sample project was tested with Eclipse 3.5 and the m2eclipse plugin.

===Use the maven dependency===
The sample project above refers to the xuml-compiler dependency as below:

Add this project's repository to your pom.xml
{{{
 <repositories>
   <repository>
     <id>xuml-compiler-repo</id>
     <name>xuml-compiler</name>
     <url>http://xuml-compiler.googlecode.com/svn/repo/</url>
   </repository>
  </repositories>
}}}
Add the xuml-compiler dependency:
{{{
 <dependency>
   <groupId>com.google.code</groupId>
   <artifactId>xuml-compiler</artifactId>
   <version>0.4.8</version>
 </dependency>
}}}

==Building xUmlCompiler from source==
The following commands build xuml-metamodel, xuml-compiler and the example projects in one go:

{{{
svn checkout http://xuml-compiler.googlecode.com/svn/trunk xuml
cd xuml/xuml-compiler-parent
mvn clean install
}}}

==System==
Here are the steps required to create a system:
  # Define a system
  # View/validate the system
  # Generate the EJBs
  # Include the generated EJBs in your runtime classpath
  # Implement the generated Action interfaces
  # Create an injector module

To run the system:
  # Initialize the injector
  # Within the context of an `EntityManager` transaction make persistent changes to the data and send events to entities.

===Define a system===
Create a class that extends [http://code.google.com/p/xuml-compiler/source/browse/trunk/xuml-compiler/src/main/java/moten/david/xuml/model/util/SystemBase.java SystemBase]. Create all the system bits in the constructor by using the utility classes that [http://code.google.com/p/xuml-compiler/source/browse/trunk/xuml-compiler/src/main/java/moten/david/xuml/model/util/SystemBase.java SystemBase] offers. For example, from [Example1Simple Simple Example]:
{{{
public Simple extends SystemBase {
        public Simple() {
                super(null, "Simple");
                initialize();
        }

        private void initialize() {
                model.Package pkg = createRootPackage("simple", "a simple system");
                Class customer = createClassWithArbitraryId(pkg, "Customer",
                                "a customer, possible contactable using multiple emails");
                createAttribute(customer, "name").setUnique(true);
                State inactive = createState(customer, "Inactive");
                State active = createState(customer, "Active");
                ...
                ...
                createAssociation("R1", createAssociationEndPrimary(customer,
                                Multiplicity.ONE, "is used to contact"),
                                createAssociationEndSecondary(email, Multiplicity.MANY,
                                                "is contactable via"));
        }
}
}}}

or 
===Define a System using Ecore===
Navigate to xUmlMetaModel/model/uml.ecore, open the file in Eclipse with the default Sample Ecore Editor, then choose Create Dynamic Instance on the System node:

http://xuml-compiler.googlecode.com/svn/trunk/xuml-compiler/docs/wiki/ecoreSystemCreate1.png 

===Validate===
Validation is performed by a [http://code.google.com/p/xuml-compiler/source/browse/trunk/xuml-compiler/src/main/java/moten/david/xuml/model/util/SystemBase.java SystemBase] method that throws a `ValidationException`:
{{{
    Simple simple = new Simple();
    simple.validate();
}}}
===View===
{{{
    simple.view("src/viewer/Simple.systemView");
}}}
===Generate===
{{{
    simple.generate("temp/simple");
}}}
===Define behaviour===
Behaviour is defined in implementations of generated interfaces that you associate with those interfaces in a Guice module. See [Behaviour Behaviour] for more.

===Examples===
To get stuck into a simple example go to [Example1Simple Simple Example].

A more detailed example is [Example2Shop Shop Example].